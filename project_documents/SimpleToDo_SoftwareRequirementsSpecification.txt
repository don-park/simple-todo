<요구사항 명세서 : ToDo 웹 애플리케이션>
1. 개요
- 프로젝트명: SimpleToDo Web
- 목적: 사용자가 로그인 후 자신의 할 일을 관리할 수 있는 간단한 웹 기반 ToDo 애플리케이션을 개발하여 웹서비스 개발 및 배포 과정을 연습한다.
- 대상 사용자: 개인 사용자 (1인 기준)

2. 기능적 요구사항 (Functional Requirements)
2.1 사용자 인증
2.1.1 회원가입
- 사용자는 이메일, 비밀번호를 입력하여 회원가입할 수 있다.
- 비밀번호는 최소 8자 이상이어야 하며, 보안을 위해 해시 처리되어 저장된다.
- 이미 등록된 이메일로 가입을 시도하면 오류 메시지를 표시한다.
- 회원가입 성공 시 로그인 페이지로 자동 이동하거나 자동 로그인된다.
2.1.2 로그인
- 사용자는 이메일과 비밀번호로 로그인할 수 있다.
- 로그인 성공 시 JWT 토큰이 발급되며, 이후 요청에 Authorization 헤더로 포함된다.
- 비밀번호가 일치하지 않거나 이메일이 존재하지 않을 경우, 로그인은 실패하며 오류 메시지를 표시한다.
2.1.3 로그아웃
- 사용자는 로그아웃 버튼을 눌러 세션(토큰)을 종료할 수 있다.
- 로그아웃 시 로컬 스토리지에 저장된 토큰은 삭제된다.

2.2 ToDo 항목 관리
2.2.1 항목 목록 조회
- 로그인한 사용자는 본인의 ToDo 목록을 조회할 수 있다.
- 항목은 기본적으로 생성일 기준 오름차순으로 정렬된다.
- 선택적으로 마감일순 정렬 기능을 제공한다.
2.2.2 항목 생성
- 사용자는 새로운 ToDo 항목을 생성할 수 있다.
- 생성 시 입력 항목들
    - 필수 항목: 제목
    - 선택 항목: 설명, 마감일
- 제목이 비어 있을 경우, 생성 버튼은 비활성화되거나 오류 메시지를 보여준다.
- 생성된 항목은 기본적으로 완료 상태가 아닌 상태로 저장된다.
2.2.3 항목 수정
- 사용자는 기존 항목의 제목, 설명, 마감일, 완료 여부를 수정할 수 있다.
- 완료 여부는 체크박스 형태로 제공되며, UI에서 즉시 반영된다.
- 수정된 내용은 백엔드에 PATCH 또는 PUT 요청으로 전달된다.
2.2.4 항목 삭제
- 사용자는 특정 항목을 삭제할 수 있다.
- 삭제 요청 시 사용자는 한번 더 확인을 받는다 ("정말 삭제하시겠습니까?")
- 삭제된 항목은 되돌릴 수 없다.

2.3 사용자 인터페이스 동작
2.3.1 접근 제한
- 로그인하지 않은 사용자가 ToDo 관련 URL에 접근하려 하면 로그인 페이지로 리다이렉트된다.
- 인증된 사용자만 자신의 항목을 조회할 수 있다. 타인의 항목은 접근할 수 없다.
2.3.2 오류 처리 및 피드백
- 모든 요청 실패 시, 사용자에게 명확한 메시지를 표시한다. (ex. "로그인이 필요합니다", "네트워크 오류", "입력값을 확인해주세요")
- 서버 응답 지연 또는 실패 시 로딩 표시 또는 오류 알림을 제공한다.
2.3.3 반응형 UI
- 모바일 및 데스크탑에서 모두 사용 가능해야 하며,
- ToDo 항목 목록은 화면 너비에 따라 적절하게 정렬된다.

3. 비기능적 요구사항 (Non-Functional Requirements)
- 접근성: 반응형 UI로 데스크탑/모바일 모두 대응
- 보안성: 비밀번호는 해시 처리하여 저장, JWT 기반 인증
- 성능: 단일 사용자 기준, 지연 없는 기본 CRUD 처리 가능
- 문서화: API 문서는 Swagger UI 등으로 자동 생성
- 확장성: 프로젝트 규모 확대를 고려한 폴더 구조 및 API 설계

4. 기술 스택 제안
- 프론트엔드
    - React (또는 HTML/CSS/JS SPA)
- 백엔드
    - FastAPI (Python)
- 인증
    - JWT (예: PyJWT 또는 fastapi-users)
- 데이터베이스
    - PostgreSQL
- 배포
    - 백엔드: 자체 서버에 Docker 기반 배포 (Ubuntu)
    - 프론트엔드: Vercel을 통한 정적 사이트 배포

5. 기타 고려사항
- 프론트엔드와 백엔드 간 도메인이 다르므로 CORS 정책 적용 필요
- 환경 변수 및 비밀 정보는 .env 파일을 통해 분리 관리
- 배포 서버는 HTTPS 적용 예정 (Nginx + 인증서 설정 가능)
- 개발 중 GitHub로 버전 관리하며, README에 배포 및 실행 방법 문서화 예정